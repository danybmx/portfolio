// Generated by CoffeeScript 1.8.0
(function() {
  var animate, animateSkills, articles, change_text_el, char_pause, divs, easeOutBounce, end_pause, header, initial_pause, intro_text_el, name, name_el, percent_el, progress, progressBars, progress_el, requestAnimationFrame, selection_pause, skill, skills, skills_container, skills_elements, start, text_index, text_strings, wheight, works, works_container, _i, _len;

  requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || window.oRequestAnimationFrame || function(callback) {
    return setTimeout(callback, 1);
  };

  easeOutBounce = function(pos) {
    if (pos < (1 / 2.75)) {
      return 7.5625 * pos * pos;
    } else if (pos < (2 / 2.75)) {
      return 7.5625 * (pos -= 1.5 / 2.75) * pos + 0.75;
    } else if (pos < (2.5 / 2.75)) {
      return 7.5625 * (pos -= 2.25 / 2.75) * pos + 0.9375;
    } else {
      return 7.5625 * (pos -= 2.625 / 2.75) * pos + 0.984375;
    }
  };

  if (document.getElementsByClassName('error').length > 0) {
    window.location.href += '#get-in-touch-anchor';
  }

  if (document.getElementById('welcome')) {
    intro_text_el = document.getElementById('intro-text');
    change_text_el = intro_text_el.getElementsByClassName('write')[0];
    text_strings = change_text_el.dataset.strings.split('|');
    initial_pause = 1000;
    selection_pause = 3000;
    end_pause = 1000;
    char_pause = 100;
    text_index = 0;
    animate = function(word) {
      var i, letter, _i, _len;
      intro_text_el.classList.remove('selected');
      change_text_el.innerHTML = '';
      i = 0;
      for (_i = 0, _len = word.length; _i < _len; _i++) {
        letter = word[_i];
        setTimeout(function() {
          return change_text_el.innerHTML += word[change_text_el.innerHTML.length];
        }, i++ * char_pause + initial_pause);
      }
      setTimeout(function() {
        return intro_text_el.classList.add('selected');
      }, initial_pause + i * char_pause + selection_pause);
      return setTimeout(function() {
        if (++text_index >= text_strings.length) {
          text_index = 0;
        }
        return animate(text_strings[text_index]);
      }, initial_pause + i * char_pause + selection_pause + end_pause);
    };
    animate(text_strings[text_index]);
    skills_container = document.getElementById('skills');
    skills_elements = skills_container.getElementsByClassName('skill');
    progressBars = function(step) {
      var canvas, canvases, ctx, end, lineWidth, padding, percent, radius, start, x, y, _i, _len, _results;
      if (step == null) {
        step = 0;
      }
      canvases = document.getElementsByTagName('canvas');
      _results = [];
      for (_i = 0, _len = canvases.length; _i < _len; _i++) {
        canvas = canvases[_i];
        padding = 10;
        lineWidth = 10;
        x = canvas.width / 2;
        y = canvas.height / 2;
        radius = x - padding - lineWidth / 2;
        percent = parseInt(canvas.dataset.progress) * step;
        start = 1.5 * Math.PI;
        end = start + 2 * percent / 100 * Math.PI;
        ctx = canvas.getContext('2d');
        ctx.clearRect(0, 0, canvas.height, canvas.width);
        ctx.beginPath();
        ctx.arc(x, y, radius, start, end);
        ctx.lineWidth = lineWidth;
        _results.push(ctx.stroke());
      }
      return _results;
    };
    start = null;
    animateSkills = function() {
      var diff, duration, step;
      duration = 2000;
      if (!start) {
        start = (new Date()).getTime();
      }
      diff = (new Date()).getTime() - start;
      if (diff > duration) {
        return progressBars(1);
      } else {
        step = diff / duration;
        progressBars(easeOutBounce(step));
        return setTimeout(animateSkills, requestAnimationFrame);
      }
    };
    for (_i = 0, _len = skills_elements.length; _i < _len; _i++) {
      skill = skills_elements[_i];
      name = skill.dataset.name;
      name_el = document.createElement('span');
      name_el.classList.add('name');
      name_el.innerHTML = name;
      progress = skill.dataset.percent;
      progress_el = document.createElement('canvas');
      progress_el.dataset.progress = progress;
      progress_el.width = progress_el.height = 280;
      percent_el = document.createElement('span');
      percent_el.classList.add('percent');
      percent_el.innerHTML = progress + '%';
      skill.appendChild(name_el);
      skill.appendChild(percent_el);
      skill.appendChild(progress_el);
    }
    header = document.getElementsByTagName('header')[0];
    articles = document.getElementsByTagName('article');
    wheight = window.innerHeight;
    divs = document.querySelectorAll('.parallax');
    skills_container = document.getElementById('skills');
    skills = skills_container.getElementsByClassName('skill');
    works_container = document.getElementById('works');
    works = works_container.getElementsByClassName('block-wrapper');
    window.addEventListener('scroll', function() {
      var active, animated, article, current_article, current_article_el, div, rect, scroll_top, speed, vpos, work, _j, _k, _l, _len1, _len2, _len3, _results;
      scroll_top = document.body.scrollTop;
      if (scroll_top > 60) {
        header.classList.add('white');
      } else {
        header.classList.remove('white');
      }
      active = document.body.querySelector('#navigation a.active');
      if (active) {
        active.classList.remove('active');
      }
      current_article = '';
      for (_j = 0, _len1 = articles.length; _j < _len1; _j++) {
        article = articles[_j];
        rect = article.getBoundingClientRect();
        if (rect.top < wheight / 2) {
          current_article = article;
        }
      }
      current_article_el = document.getElementById('navigation').querySelector('.' + current_article.id);
      if (current_article_el) {
        current_article_el.classList.add('active');
      }
      for (_k = 0, _len2 = divs.length; _k < _len2; _k++) {
        div = divs[_k];
        speed = parseInt(div.dataset.speed) / 100 || 0.1;
        vpos = scroll_top * speed;
        div.style.backgroundPosition = '50% calc(50% + ' + vpos + 'px)';
      }
      animated = false;
      if (animated === false && skills_container.getBoundingClientRect().top < wheight / 2) {
        animated = true;
        animateSkills();
      }
      _results = [];
      for (_l = 0, _len3 = works.length; _l < _len3; _l++) {
        work = works[_l];
        if (work.getBoundingClientRect().top < wheight) {
          _results.push(work.classList.add('in'));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    });
  }

}).call(this);
